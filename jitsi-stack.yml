---
heat_template_version: 2016-10-14

###########
parameters:

  image_jitsi:
    type: string
    constraints:
      - custom_constraint: glance.image
    default: openSUSE 15.1

  flavor_jitsi:
    type: string
    constraints:
      - custom_constraint: nova.flavor
    default: s2.large.4

  availability_zone:
    type: string
    default: eu-de-03

  public:
    type: string
    constraints:
      - custom_constraint: neutron.network
    default: admin_external_net

  jitsi_user:
    type: string

  jitsi_password:
    type: string

  public_domain:
    type: string

  public_port:
    type: number
    default: 8443

  letsenc_domain:
    type: string
    default: ""
    # Empty will default to public_domain

  # If you set this, no cert.crt/key will get copied in
  letsenc_mail:
    type: string
    default: ""

  public_url:
    type: string
    default: ""
    # By default https://{get_param: public_domain}:{get_param: public_port}/ will be used

  tweak_ideal_height:
    type: number
    default: 720

  tweak_channelLastN:
    type: number
    default: -1


description: Heat stack for Jitsi deployment using docker-jitsi-meet

##########
resources:

  #########
  # Generic
  #########

  key:
    type: OS::Nova::KeyPair
    properties:
      name: {get_param: "OS::stack_name"}
      save_private_key: true

  jitsi_wait_handle:
    type: OS::Heat::WaitConditionHandle

  jitsi_wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: jitsi_wait_handle}
      timeout: 1200

  jitsi_boot_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        package_update: true
        package_upgrade: true
        packages:
          - docker
          - docker-compose
          - make
        write_files:
          # Remove those two if you don't need them
          - content: {get_file: cert.crt}
            path: /root/cert.crt
            permissions: 0644
          - content: {get_file: cert.key}
            path: /root/cert.key
            permissions: 0600
          - content: {get_file: enable-constraints.sed}
            path: /root/enable-constraints.sed
            permissions: 0644
          - content:
              str_replace:
                params:
                  wc_notify: {get_attr: ['jitsi_wait_handle', 'curl_cli']}
                  jitsi_user: {get_param: jitsi_user}
                  jitsi_password: {get_param: jitsi_password}
                  public_domain: {get_param: public_domain}
                  public_port: {get_param: public_port}
                  public_url: {get_param: public_url}
                  letsenc_mail: {get_param: letsenc_mail}
                  letsenc_domain: {get_param: letsenc_domain}
                  tweak_ideal_height: {get_param: tweak_ideal_height}
                  tweak_channelLastN: {get_param: tweak_channelLastN}
                template: |
                  #!/usr/bin/env bash
                  export USER=root
                  export USERNAME=$USER
                  export HOME=/$USER
                  cd ~
                  systemctl stop SuSEfirewall2
                  sysctl -w net.ipv4.ip_forward=1
                  systemctl enable docker
                  systemctl restart docker
                  mkdir -p ~/.jitsi-meet-cfg/{web/letsencrypt,transcripts,prosody,jicofo,jvb}
                  mkdir -p ~/.jitsi-meet-cfg/web/nginx
                  # Generate Diffie-Hellmann parameters for SSL
                  openssl dhparam -out ~/.jitsi-meet-cfg/web/nginx/dhparams.pem 2048 &
                  git clone https://github.com/jitsi/docker-jitsi-meet
                  cd docker-jitsi-meet
                  make
                  cp -p docker-compose.yml etherpad.yml ~
                  cp -p env.example ~/.env
                  cd ..
                  # This is only used internally
                  sed -i 's/passw0rd/p@33W0rd/g' .env
                  PUBLIC_URL="public_url"
                  if test -z "$PUBLIC_URL"; then PUBLIC_URL="https://public_domain:public_port/"; fi
                  sed -i "s@^#PUBLIC_URL=.*\$@PUBLIC_URL=$PUBLIC_URL/@" .env
                  IP=$(ip addr show eth0 | grep 'inet ' | sed 's@^ *inet \([0-9\.]*\)/\([0-9]*\) .*$@\1@')
                  sed -i "s@^#DOCKER_HOST_ADDRESS=.*\$@DOCKER_HOST_ADDRESS=$IP@" .env
                  if test -n "letsenc_mail"; then
                    sed -i 's/^#LETSENCRYPT_EMAIL=.*$/LETSENCRYPT_EMAIL=letsenc_mail/' .env
                    LETSENC_DOM="letsenc_domain"
                    if test -z "$LETSENC_DOM"; then LETSENC_DOM="public_domain"; fi
                    sed -i "s@^#LETSENCRYPT_DOMAIN=.*\$@LETSENCRYPT_DOMAIN=$LETSENC_DOM@" .env
                  fi
                  #sed -i 's@^#ETHERPAD_URL_BASE@ETHERPAD_URL_BASE@' .env
                  sed -i 's@^#ENABLE_AUTH@ENABLE_AUTH@' .env
                  sed -i 's@^#ENABLE_GUESTS@ENABLE_GUESTS@' .env
                  sed -i 's@^#AUTH_TYPE=@AUTH_TYPE=@' .env
                  #docker-compose -f ~/docker-compose.yml -f ~/etherpad.yml up -d
                  docker-compose -f ~/docker-compose.yml up -d
                  # Only if not using LETSENCRYPT
                  if test -z "letsenc_mail"; then
                    cp -p cert.crt ~/.jitsi-meet-cfg/web/keys/cert.crt
                    cp -p cert.key ~/.jitsi-meet-cfg/web/keys/cert.key
                  fi
                  if test -n "tweak_ideal_height" -a "tweak_ideal_height" != "0"; then
                     sed -i "s@^\(.*ideal:\)[ 0-9]*@\1 tweak_ideal_height@" ~/.jitsi-meet-cfg/web/config.js
                     sed -i "s@^\(.*min:\)[ 0-9]*@\1 180@" ~/.jitsi-meet-cfg/web/config.js
                     # TODO: Enable the complete Constraints section
                     sed -f enable-constraints.sed -i ~/.jitsi-meet-cfg/web/config.js
                     # TODO: Ensure Simulcast is NOT disabled
                     sed -i 's@^ */* *disableSimulcast:.*$@    disableSimulcast: false,@' ~/.jitsi-meet-cfg/web/config.js
                     # TODO: Add tweak to enableLayerSuspension
                     sed -i 's@^ */* *enableLayerSuspension:.*$@    enableLayerSuspension: true,@' ~/.jitsi-meet-cfg/web/config.js
                     # TODO: Allow SuspendVideo
                     #sed -i 's@^ */* *disableSuspendVideo:.*$@    disableSuspendVideo: false,@'  ~/.jitsi-meet-cfg/web/config.js
                     # TODO: StartVideoMuted: 10 enablement
                  fi
                  if test -n "tweak_channelLastN" -a "tweak_channelLastN" != "-1"; then
                    sed -i 's@channelLastN: [-0-9]*@channelLastN: tweak_channelLastN@' ~/.jitsi-meet-cfg/web/config.js
                  fi
                  # Deploy one user
                  docker exec root_prosody_1 prosodyctl --config /config/prosody.cfg.lua register jitsi_user meet.jitsi jitsi_password
                  # Restart web container to make SSL/height changes effective
                  docker restart root_web_1
                  # TODO: 
                  # Update DNS entry for garloff6.de
                  wc_notify --data-binary '{"status": "SUCCESS"}'

            path: /root/run.sh
            permissions: 0700
          - content: |
              #!/bin/bash
              export USER=root
              export USERNAME=$USER
              export HOME=/$USER
              cd ~
              #docker-compose -f ~/docker-compose.yml -f ~/etherpad.yml down
              docker-compose -f ~/docker-compose.yml down
            path: /root/down.sh
            permissions: 0750

        runcmd:
          - "systemctl enable docker"
          - "/root/run.sh"
        final_message: "The system is finally up, after $UPTIME seconds"


  #################
  # Security groups
  #################

  security_group_jitsi:
    type: OS::Neutron::SecurityGroup
    properties:
      name: {get_param: "OS::stack_name"}
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
          # Port 80 needed for letsenc acme challenge?
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: {get_param: public_port}
          port_range_max: {get_param: public_port}
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: 10000
          port_range_max: 10010

  ############
  # Networks #
  ############

  net_jitsi:
    type: OS::Neutron::Net
    properties:
      name: {get_param: "OS::stack_name"}

  subnet_jitsi:
    type: OS::Neutron::Subnet
    properties:
      name: {get_param: "OS::stack_name"}
      network: {get_resource: net_jitsi}
      cidr: 192.168.10.0/24
      # OTC
      #dns_nameservers: [ 100.125.4.25, 9.9.9.9 ]
      dns_nameservers: [ 9.9.9.9, 8.8.8.8 ]
      allocation_pools:
        -
          start: 192.168.10.100
          end: 192.168.10.120

  ##########################
  # Network infrastructure #
  ##########################

  router:
    type: OS::Neutron::Router
    properties:
      name: {get_param: "OS::stack_name"}
      external_gateway_info:
        network: {get_param: public}
        # OTC
        # enable_snat: true     

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: {get_resource: router}
      subnet: {get_resource: subnet_jitsi}

  ###########
  # Manager #
  ###########

  jitsi_port:
    type: OS::Neutron::Port
    properties:
      name: {get_param: "OS::stack_name"}
      network_id: {get_resource: net_jitsi}
      fixed_ips:
        - ip_address: 192.168.10.99
      security_groups:
        - {get_resource: security_group_jitsi}

  jitsi_floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: router_interface
    properties:
      floating_network_id: {get_param: public}
      port_id: {get_resource: jitsi_port}

  jitsi_server:
    type: OS::Nova::Server
    properties:
      name: {get_param: "OS::stack_name"}
      key_name: {get_resource: key}
      image: {get_param: image_jitsi}
      flavor: {get_param: flavor_jitsi}
      availability_zone: {get_param: availability_zone}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: jitsi_boot_config}
      metadata:
        group: jitsi
      config_drive: true
      networks:
        - port: {get_resource: jitsi_port}

########
outputs:

  jitsi_address:
    value: {get_attr: [jitsi_floating_ip, floating_ip_address]}

  jitsi_address_internal:
    value: {get_attr: [jitsi_port, fixed_ips, 0, ip_address]}

  public_key:
    value: {get_attr: [key, public_key]}

  private_key:
    value: {get_attr: [key, private_key]}
