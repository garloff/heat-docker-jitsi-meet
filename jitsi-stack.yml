---
heat_template_version: 2016-10-14

###########
parameters:

  image_jitsi:
    type: string
    constraints:
      - custom_constraint: glance.image
    default: openSUSE 15.3

  flavor_jitsi:
    type: string
    constraints:
      - custom_constraint: nova.flavor
    #OTC default: s2.large.4
    default: SCS-2V:4:10

  availability_zone:
    type: string
    #OTC default: eu-de-03
    default: nova

  public:
    type: string
    constraints:
      - custom_constraint: neutron.network
    #OTC default: admin_external_net
    default: ext-net

  # Separate multiple names with whitespace
  jitsi_user:
    type: string

  # dito
  jitsi_password:
    type: string

  jitsi_watermark_link:
    type: string
    default: https://jitsi.org

  jitsi_version:
    type: string
    default: stable-6726-1
    #default: master

  # Default 0 is autodetect (using the MTU from the default route's NIC)
  # Any other number (e.g. 1440) overrides this.
  docker_mtu:
    type: number
    default: 0

  public_domain:
    type: string

  public_port:
    type: number
    default: 8443

  xmpp_domain:
    type: string
    default: ""

  timezone:
    type: string
    default: Europe/Amsterdam

  # Set to two-letter country code
  ui_language:
    type: string
    default: en

  letsenc_domain:
    type: string
    default: ""
    # Empty will default to public_domain

  # If you set this, no cert.crt/key will get copied in
  letsenc_mail:
    type: string
    default: ""

  # Set to 80 if you use letsenc and don't redirect from 80
  letsenc_http_port:
    type: number
    default: 8000

  public_url:
    type: string
    default: ""
    # By default https://{get_param: public_domain}:{get_param: public_port}/ will be used

  tweak_ideal_height:
    type: number
    default: 720

  # If you want to enable FHD, set this to 1080
  tweak_max_height:
    type: number
    default: 0

  tweak_aspectRatio:
    type: string
    default: 16/9

  # You can only show last 12 speakers or so if you want
  tweak_channelLastN:
    type: number
    default: -1

  # STUN servers
  stun_servers:
    type: string
    #default: stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302
    #default: stun.stunprotocol.org:3478,stun.services.mozilla.com:3478
    default: stun.hosteurope.de:3478,stun.1und1.de:3478,stun.xs4all.nl,stun.linphone.org:3478,stun.t-online.de:3478

  # Use STUN servers also for p2p
  use_stun_p2p:
    type: number
    default: 0

  # Fill these vars if you want to set up a bridge to SIP
  jigasi_sip_uri:
    type: string
    default: ""

  jigasi_sip_server:
    type: string
    default: ""
    # will be extracted from sip_uri if empty

  jigasi_sip_password:
    type: string
    default: ""

  jigasi_sip_transport:
    type: string
    default: UDP

  jigasi_sip_port:
    type: number
    default: 5060

  jigasi_port_min:
    type: number
    default: 20000

  jigasi_port_max:
    type: number
    default: 20020
    # Upstream default is 20050

  # Default room for incoming calls
  jigasi_default_room:
    type: string
    default: ""

  # Enable WSS (I have never gotten it to work)
  enable_websocket:
    type: number
    default: 0

  # Enable VP9 (numeric here, will be transformed to boolean)
  enable_vp9:
    type: number
    default: 0

  # tweak VP9 bandwidth in kbps low, std, hi: 100, 300, 1200
  vp9_bandwidth:
    type: string
    default: ""

  # tweak VP8 bandwidth in kbps low, std, hi: 200, 500, 1500
  vp8_bandwidth:
    type: string
    default: ""

  # tweak opus rate (in kpbs, default is 20)
  tweak_opusMaxAvgRate:
    type: number
    default: 0

  # tweak opus redundancy (bool)
  tweak_opusRed:
    type: boolean
    default: false

  # switch on stereo
  enable_stereo:
    type: number
    default: 0

  # tweak limit after which participants join with muted audio
  # increasing it beyond the no of participants might avoid audio trouble
  # https://github.com/jitsi/jitsi-meet/issues/5230
  tweak_AudioMuted:
    type: number
    default: 12

  # tweak limit after which participants join with muted video
  tweak_VideoMuted:
    type: number
    default: 12

  # Enable Prejoin Page -- Chrome requires it now
  # https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio
  enable_prejoin:
    type: number
    default: 1

  # https://community.jitsi.org/t/screensharing-crashing-when-using-vp9/103411/6
  disable_screenshare_framerate:
    type: number
    default: 0

  # Avoid disabling harvester
  disable_tcp_harvester:
    type: boolean
    default: true

description: Heat stack for Jitsi deployment using docker-jitsi-meet

##########
resources:

  #########
  # Generic
  #########

  key:
    type: OS::Nova::KeyPair
    properties:
      name: {get_param: "OS::stack_name"}
      save_private_key: true

  jitsi_wait_handle:
    type: OS::Heat::WaitConditionHandle

  jitsi_wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: jitsi_wait_handle}
      timeout: 1500

  jitsi_boot_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        package_update: true
        package_upgrade: true
        packages:
          - docker
          - docker-compose
          - make
          - pwgen
          - curl
        write_files:
          - content: {get_file: cert.crt}
            path: /root/cert.crt
            permissions: 0644
          - content: {get_file: cert.key}
            path: /root/cert.key
            permissions: 0600
          - content: {get_file: enable-constraints.sed}
            path: /root/enable-constraints.sed
            permissions: 0644
          - content: {get_file: enable-videoqual.sed}
            path: /root/enable-videoqual.sed
            permissions: 0644
          - content: {get_file: enable-lastN.sed}
            path: /root/enable-lastN.sed
            permissions: 0644
          - content: {get_file: enable-bitrate-limits.sed}
            path: /root/enable-bitrate-limits.sed
            permissions: 0644
          - content: {get_file: stun-comma.sed}
            path: /root/stun-comma.sed
            permissions: 0644
          - content: {get_file: jvb-xmpp-domain.diff}
            path: /root/jvb-xmpp-domain.diff
            permissions: 0644
          - content:
              str_replace:
                params:
                  jitsi_version: {get_param: jitsi_version}
                  letsenc_mail: {get_param: letsenc_mail}
                template: |
                  #!/usr/bin/env bash
                  export USER=root
                  export USERNAME=$USER
                  export HOME=/$USER
                  cd ~
                  mkdir -p ~/.jitsi-meet-cfg/{web/letsencrypt,web/nginx,transcripts,prosody,jicofo,jvb,jigasi/log}
                  chown 999:1000 ~/.jitsi-meet-cfg/jigasi/log
                  # Generate Diffie-Hellmann parameters for SSL
                  openssl dhparam -out ~/.jitsi-meet-cfg/web/nginx/dhparams.pem 2048 &
                  systemctl stop SuSEfirewall2
                  sysctl -w net.ipv4.ip_forward=1
                  systemctl enable docker
                  systemctl restart docker
                  git clone https://github.com/jitsi/docker-jitsi-meet
                  cd docker-jitsi-meet
                  git checkout jitsi_version
                  # XMPP_WEBSOCKET breaks us, disable in .env later
                  #git revert 465816b4ebf2babf1b9e6daf007301c1fd17552e
                  patch -p1 < ../jvb-xmpp-domain.diff
                  # We can safely ignore hanging pipstrap if we are not using letsenc
                  if test -z "letsenc_mail"; then
                    sed -i 's/\(certbot\-auto \-\-noninteractive.*$\)/timeout 21 \1 || true/' web/Dockerfile
                  fi
                  # FIXME: Pin to stable-5765-1 version for jitsi-meet-web/-config
                  #sed -i '/apt-get/s/jitsi\-meet\-web\(\-config\|\) /jitsi-meet-web\1=1.0.4900-1 /g' web/Dockerfile
                  # Inject icon/watermark
                  if test -r /root/favicon.ico -a $(stat -c %s /root/favicon.ico) -gt 0; then
                    mkdir -p web/rootfs/usr/share/jitsi-meet/images
                    cp -p /root/favicon.ico web/rootfs/usr/share/jitsi-meet/images/favicon.ico
                    cp -p /root/favicon.ico web/rootfs/usr/share/jitsi-meet/favicon.ico
                  fi
                  if test -r /root/watermark.svg -a $(stat -c %s /root/watermark.svg) -gt 0; then
                    mkdir -p web/rootfs/usr/share/jitsi-meet/images
                    cp -p /root/watermark.svg web/rootfs/usr/share/jitsi-meet/images/watermark.svg
                  fi
                  # Copy rootfs after installing packages, so files can be overwritten
                  #sed -i 's@^COPY rootfs@#COPY rootfs@' web/Dockerfile
                  sed -i "s@^\(.*rm \-rf /tmp/pkg.*$\)@\1\n\nCOPY rootfs/ /@" web/Dockerfile
                  # Workaround 5765 issues: https://github.com/jitsi/docker-jitsi-meet/issues/1018
                  # Update the configuration
                  if ! grep "client\-proxy" jicofo/rootfs/defaults/jicofo.conf >/dev/null; then
                    sed -i -E '/^\s+disable-certificate-verification = true/a \\tclient-proxy = "focus.{{ .Env.XMPP_DOMAIN }}"' jicofo/rootfs/defaults/jicofo.conf
                  fi
                  # Replace tag - by default, it is "stable-5765" but we want to use "latest", which is the one built by Makefile
                  sed -i 's/:stable-[5678][0-9-]*/:latest/' docker-compose.yml
                  # End workarounds
                  make JITSI_RELEASE=stable
            path: /root/build-jitsi.sh
            permissions: 0700
          - content:
              str_replace:
                params:
                  xmpp_domain: {get_param: xmpp_domain}
                  public_domain: {get_param: public_domain}
                  public_port: {get_param: public_port}
                  public_url: {get_param: public_url}
                  timezone: {get_param: timezone}
                  letsenc_mail: {get_param: letsenc_mail}
                  letsenc_domain: {get_param: letsenc_domain}
                  letsenc_http_port: {get_param: letsenc_http_port}
                  stun_servers: {get_param: stun_servers}
                  jigasi_sip_uri: {get_param: jigasi_sip_uri}
                  jigasi_sip_server: {get_param: jigasi_sip_server}
                  jigasi_sip_password: {get_param: jigasi_sip_password}
                  jigasi_sip_transport: {get_param: jigasi_sip_transport}
                  jigasi_sip_port: {get_param: jigasi_sip_port}
                  jigasi_port_min: {get_param: jigasi_port_min}
                  jigasi_port_max: {get_param: jigasi_port_max}
                  enable_vp9: {get_param: enable_vp9}
                  enable_websocket: {get_param: enable_websocket}
                  enable_prejoin: {get_param: enable_prejoin}
                  floating_ip: {get_attr: [jitsi_floating_ip, floating_ip_address]}
                  disable_tcp_harvester: {get_param: disable_tcp_harvester}
                template: |
                  #!/usr/bin/env bash
                  export USER=root
                  export USERNAME=$USER
                  export HOME=/$USER
                  cd ~/docker-jitsi-meet

                  cp -p docker-compose.yml etherpad.yml jigasi.yml ~
                  cp -p env.example ~/.env
                  cd ..
                  for nm in *.yml; do sed -i 's@^\( *image: jitsi/[^:]*\):.*$@\1:latest@g' $nm; done
                  chmod 0600 .env
                  # This is only used internally
                  #sed -i 's/passw0rd/p@33W0rd/g' .env
                  cp -p docker-jitsi-meet/gen-passwords.sh .
                  ./gen-passwords.sh
                  # Set input parameters
                  if test -n "xmpp_domain"; then sed -i 's/meet\.jitsi/xmpp_domain/g' .env; fi
                  PUBLIC_URL="public_url"
                  if test -z "$PUBLIC_URL"; then PUBLIC_URL="https://public_domain:public_port/"; fi
                  sed -i "s@^#PUBLIC_URL=.*\$@PUBLIC_URL=$PUBLIC_URL@" .env
                  IP=$(ip addr show eth0 | grep 'inet ' | sed 's@^ *inet \([0-9\.]*\)/\([0-9]*\) .*$@\1@')
                  sed -i "s@^#DOCKER_HOST_ADDRESS=.*\$@#DOCKER_HOST_ADDRESS=$IP\nDOCKER_HOST_ADDRESS=floating_ip@" .env
                  if test -n "letsenc_mail"; then
                    sed -i 's/^#LETSENCRYPT_EMAIL=.*$/LETSENCRYPT_EMAIL=letsenc_mail/' .env
                    LETSENC_DOM="letsenc_domain"
                    if test -z "$LETSENC_DOM"; then LETSENC_DOM="public_domain"; fi
                    sed -i "s@^#LETSENCRYPT_DOMAIN=.*\$@LETSENCRYPT_DOMAIN=$LETSENC_DOM@" .env
                    sed -i 's@^#ENABLE_LETSENCRYPT=1@ENABLE_LETSENCRYPT=1@' .env
                  fi
                  sed -i 's@HTTP_PORT=.*$@HTTP_PORT=letsenc_http_port@' .env
                  sed -i 's@HTTPS_PORT=.*$@HTTPS_PORT=public_port@' .env
                  sed -i 's@TZ=.*$@TZ=timezone@' .env
                  #sed -i 's@^#ETHERPAD_URL_BASE@ETHERPAD_URL_BASE@' .env
                  sed -i 's@^#ENABLE_AUTH@ENABLE_AUTH@' .env
                  sed -i 's@^#ENABLE_GUESTS@ENABLE_GUESTS@' .env
                  sed -i 's@^#*ENABLE_PREJOIN_PAGE=.*@ENABLE_PREJOIN_PAGE=enable_prejoin@' .env
                  sed -i 's@^#AUTH_TYPE=@AUTH_TYPE=@' .env
                  sed -i 's@^JVB_STUN_SERVERS=.*$@JVB_STUN_SERVERS=stun_servers@' .env
                  # JIGASI
                  JIGASI_SIP_URI="jigasi_sip_uri"
                  if test -n "$JIGASI_SIP_URI"; then
                    JIGASI_SIP_SERVER="jigasi_sip_server"
                    if test -z "$JIGASI_SIP_SERVER"; then JIGASI_SIP_SERVER="${JIGASI_SIP_URI##*@}"; fi
                    sed -i "s/^#JIGASI_SIP_URI=.*\$/JIGASI_SIP_URI=$JIGASI_SIP_URI/" .env
                    sed -i "s/^#JIGASI_SIP_SERVER=.*\$/JIGASI_SIP_SERVER=$JIGASI_SIP_SERVER/" .env
                    sed -i 's@^#JIGASI_SIP_PASSWORD=.*$@JIGASI_SIP_PASSWORD=jigasi_sip_password@' .env
                    sed -i 's@^#JIGASI_SIP_TRANSPORT=.*$@JIGASI_SIP_TRANSPORT=jigasi_sip_transport@' .env
                    sed -i 's@^#JIGASI_SIP_PORT=.*$@JIGASI_SIP_PORT=jigasi_sip_port@' .env
                    sed -i 's@^JIGASI_PORT_MIN=.*$@JIGASI_PORT_MIN=jigasi_port_min@' .env
                    sed -i 's@^JIGASI_PORT_MAX=.*$@JIGASI_PORT_MAX=jigasi_port_max@' .env
                  fi
                  # Disable Websockets
                  sed -i 's/^ENABLE_XMPP_WEBSOCKET=/#ENABLE_XMPP_WEBSOCKET=/' .env
                  sed -i 's/^ENABLE_COLIBRI_WEBSOCKET=/#ENABLE_COLIBRI_WEBSOCKET=/' .env
                  echo "ENABLE_XMPP_WEBSOCKET=enable_websocket" >> .env
                  #echo "ENABLE_COLIBRI_WEBSOCKET=enable_websocket" >> .env
                  if test "enable_websocket" = "0"; then
                    echo "ENABLE_SCTP=1" >> .env
                  fi
                  if test "enable_vp9" != "0"; then echo "ENABLE_CODEC_VP9=true" >> .env; fi
                  DIS_HARV=$(echo disable_tcp_harvester | tr A-Z a-z)
                  sed -i "s/\(JVB_TCP_HARVESTER_DISABLED=\).*/\1$DIS_HARV/" .env
            path: /root/config-env.sh
            permissions: 0700
          - content:
              str_replace:
                params:
                  xmpp_domain: {get_param: xmpp_domain}
                  wc_notify: {get_attr: ['jitsi_wait_handle', 'curl_cli']}
                  jitsi_user: {get_param: jitsi_user}
                  jitsi_password: {get_param: jitsi_password}
                  jitsi_watermark_link: {get_param: jitsi_watermark_link}
                  ui_language: {get_param: ui_language}
                  letsenc_mail: {get_param: letsenc_mail}
                  tweak_ideal_height: {get_param: tweak_ideal_height}
                  tweak_max_height: {get_param: tweak_max_height}
                  tweak_aspectRatio: {get_param: tweak_aspectRatio}
                  tweak_channelLastN: {get_param: tweak_channelLastN}
                  tweak_AudioMuted: {get_param: tweak_AudioMuted}
                  tweak_VideoMuted: {get_param: tweak_VideoMuted}
                  tweak_channelLastN: {get_param: tweak_channelLastN}
                  jigasi_sip_uri: {get_param: jigasi_sip_uri}
                  jigasi_default_room: {get_param: jigasi_default_room}
                  stun_servers: {get_param: stun_servers}
                  use_stun_p2p: {get_param: use_stun_p2p}
                  enable_vp9: {get_param: enable_vp9}
                  vp9_bandwidth: {get_param: vp9_bandwidth}
                  vp8_bandwidth: {get_param: vp8_bandwidth}
                  tweak_opusMaxAvgRate: {get_param: tweak_opusMaxAvgRate}
                  tweak_opusRed: {get_param: tweak_opusRed}
                  enable_stereo: {get_param: enable_stereo}
                  disable_screenshare_framerate: {get_param: disable_screenshare_framerate}
                template: |
                  #!/usr/bin/env bash
                  export USER=root
                  export USERNAME=$USER
                  export HOME=/$USER
                  cd ~

                  JIGASI_SIP_URI="jigasi_sip_uri"
                  if test -n "$JIGASI_SIP_URI"; then
                    docker-compose -f ~/docker-compose.yml -f ~/jigasi.yml up -d
                  else
                    docker-compose -f ~/docker-compose.yml up -d
                  fi
                  #docker-compose -f ~/docker-compose.yml $START_JIGASI -f ~/etherpad.yml up -d

                  WEBCFG=~/.jitsi-meet-cfg/web/config.js
                  WEBIFCFG=~/.jitsi-meet-cfg/web/interface_config.js
                  # Wait up to two mins for web config (due to wait for letsenc certificate)
                  declare -i ctr=0
                  while test ! -e $WEBCFG -a $ctr -le 120; do
                    sleep 1
                    let ctr+=1
                  done
                  # Only if not using LETSENCRYPT
                  if test -z "letsenc_mail"; then
                    cp -p cert.crt ~/.jitsi-meet-cfg/web/keys/cert.crt
                    cp -p cert.key ~/.jitsi-meet-cfg/web/keys/cert.key
                  else
                    chmod og-r ~/.jitsi-meet-cfg/web/letsencrypt/$LETSENC_DOM/privkey.pem
                    cp -p ~/.jitsi-meet-cfg/web/letsencrypt/$LETSENC_DOM/privkey.pem cert.key
                    cp -p ~/.jitsi-meet-cfg/web/letsencrypt/$LETSENC_DOM/fullchain.pem cert.crt
                  fi
                  sleep 1
                  cp -p $WEBCFG $WEBCFG.orig
                  # Does no longer work in newer templates
                  ASPECT="16/9"
                  if test -n "tweak_aspectRatio"; then
                     sed -i "s@aspectRatio: [0-9/, ]*\$@aspectRatio: tweak_aspectRatio@" $WEBCFG
                     ASPECT="tweak_aspectRatio"
                  fi
                  if test -n "tweak_ideal_height" -a "tweak_ideal_height" != "0"; then
                     # TODO: Enable the complete Constraints section
                     sed -f enable-constraints.sed -i $WEBCFG
                     # Tweak idael height and min
                     sed -i "s@^\(.*ideal:\)[ 0-9]*@\1 tweak_ideal_height@" $WEBCFG
                     sed -i "s@^\([^/]*min:\)[ 0-9]*\$@\1 180@" $WEBCFG
                     # New config style
                     WIDTH=$((tweak_ideal_height*$ASPECT))
                     sed -i 's@^\(config\.resolution =\).*$@\1 tweak_ideal_height;@' $WEBCFG
                     sed -i "s@^\(config\.constraints\.video\.height = { ideal:\) [0-9]*,@\1 tweak_ideal_height,@" $WEBCFG
                     sed -i "s@^\(config\.constraints\.video\.width = { ideal:\) [0-9]*,@\1 $WIDTH,@" $WEBCFG
                     # TODO: Ensure Simulcast is NOT disabled
                     sed -i 's@^ */* *disableSimulcast:.*$@    disableSimulcast: false,@' $WEBCFG
                     # TODO: Add tweak to enableLayerSuspension
                     sed -i 's@^ */* *enableLayerSuspension:.*$@    enableLayerSuspension: true,@' $WEBCFG
                     # TODO: Allow SuspendVideo
                     #sed -i 's@^ */* *disableSuspendVideo:.*$@    disableSuspendVideo: false,@'  ~/.jitsi-meet-cfg/web/config.js
                     # TODO: StartVideoMuted: 12 enablement
                  fi
                  if test -n "tweak_max_height" -a "tweak_max_height" != "0"; then
                     sed -i "s@^\([^/]*max:\)[ 0-9]*,\$@\1 tweak_max_height,@" $WEBCFG
                     WIDTH=$((tweak_max_height*$ASPECT))
                     sed -i "s@^\(config\.constraints\.video\.height = { ideal: [0-9]*, max:\) [0-9]*,@\1 tweak_max_height,@" $WEBCFG
                     sed -i "s@^\(config\.constraints\.video\.width = { ideal: [0-9]*, max:\) [0-9]*,@\1 $WIDTH,@" $WEBCFG
                  fi
                  if test -n "tweak_channelLastN" -a "tweak_channelLastN" != "-1"; then
                    sed -i 's@channelLastN: [-0-9]*@channelLastN: tweak_channelLastN@' $WEBCFG
                  else
                    sed -f enable-lastN.sed -i $WEBCFG
                  fi
                  sed -i 's@^ */* *requireDisplayName:.*$@    requireDisplayName: true,@' $WEBCFG
                  sed -i 's@^config\.requireDisplayName = .*$@config.requireDisplayName = true;@' $WEBCFG
                  if test "ui_language" != "en"; then
                    sed -i "s@^ */* *defaultLanguage:.*\$@    defaultLanguage: 'ui_language',@" $WEBCFG
                  fi
                  if test -n "jitsi_watermark_link"; then
                    sed -i "s@JITSI_WATERMARK_LINK: '.*'@JITSI_WATERMARK_LINK: 'jitsi_watermark_link'@" $WEBIFCFG
                  fi
                  echo "// Overrides by run.sh (heat-docker-jitsi-meet)" >> $WEBCFG
                  if test "use_stun_p2p" != "0"; then
                    echo -n "config.p2p.stunServers = [" >> $WEBCFG
                    echo -n "stun_servers"  | sed "s/\([^,]*\)/ { urls: 'stun:\1' }/g" >> $WEBCFG
                    echo " ];" >> $WEBCFG
                  fi
                  if test "enable_vp9" != "0"; then
                    sed -f enable-videoqual.sed -i $WEBCFG
                    #sed -f stun-comma.sed -i $WEBCFG
                    sed -i "s@^\( *\)\/\/ \( *preferredCodec: \).*\$@\1\2'VP9',@" $WEBCFG
                    sed -f enable-bitrate-limits.sed -i $WEBCFG
                  fi
                  if test -n "vp9_bandwidth"; then
                    echo "vp9_bandwidth" | sed 's@^\([0-9]*\), *\([0-9]*\), *\([0-9]*\) *$@config.videoQuality.maxBitratesVideo.VP9 = { low: \1000, standard: \2000, high: \3000 };@' >> $WEBCFG
                  fi
                  if test -n "vp8_bandwidth"; then
                    echo "vp8_bandwidth" | sed 's@^\([0-9]*\), *\([0-9]*\), *\([0-9]*\) *$@config.videoQuality.maxBitratesVideo.VP8 = { low: \1000, standard: \2000, high: \3000 };@' >> $WEBCFG
                  fi
                  if test "tweak_AudioMuted" != 0; then
                    sed -i 's@^[/ ]*config\.startAudioMuted = .*$@config.startAudioMuted = tweak_AudioMuted;@' $WEBCFG
                  fi
                  if test "tweak_VideoMuted" != 0; then
                    sed -i 's@^[/ ]*config\.startVideoMuted = .*$@config.startVideoMuted = tweak_VideoMuted;@' $WEBCFG
                  fi
                  if test "tweak_opusMaxAvgRate" != 0; then
                    echo "config.testing.audioQuality.opusMaxAverageBitrate = tweak_opusMaxAvgRate000;" >> $WEBCFG
                  fi
                   if test "tweak_opusRed" != "false"; then
                    echo "config.testing.audioQuality.enableOpusRed = tweak_opusRed;" >> $WEBCFG
                  fi
                  if test "enable_stereo" != 0; then
                    echo "config.testing.audioQuality.stereo = true;" >> $WEBCFG
                  fi
                  if test "disable_screenshare_framerate" != 0; then
                    sed -i 's@^config.desktopSharingFrameRate@//config.desktopSharingFrameRate@' $WEBCFG
                  fi
                  sleep 1
                  # Deploy users
                  if test -n "xmpp_domain"; then XMPP_DOMAIN=xmpp_domain; else XMPP_DOMAIN=meet.jitsi; fi
                  USERS=(jitsi_user); PASSW=(jitsi_password)
                  for idx in $(seq 0 $((${#USERS[*]}-1))); do
                    docker exec root_prosody_1 prosodyctl --config /config/prosody.cfg.lua register ${USERS[$idx]} $XMPP_DOMAIN ${PASSW[$idx]}
                  done
                  # Restart nginx in web container to make SSL/height changes effective
                  #docker restart root_web_1
                  NGINX=$(ps -x | grep "nginx: master" | grep -v grep | awk '{ print $1; }')
                  kill $NGINX
                  # Dial-In
                  if test -n "$JIGASI_SIP_URI"; then
                    # Tweak jigasi default room
                    PROP=~/.jitsi-meet-cfg/jigasi/sip-communicator.properties
                    cp -p $PROP $PROP.orig
                    echo "## Options added by run.sh script from heat-docker-jitsi-meet" >> $PROP
                    if test -n "jigasi_default_room"; then
                      echo "org.jitsi.jigasi.DEFAULT_JVB_ROOM_NAME=jigasi_default_room@muc.$XMPP_DOMAIN" >> $PROP
                    fi
                    # enable GSM, Speex, SILK (better compat)
                    sed -i 's@net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.GSM/8000=0@net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.GSM/8000=690@' $PROP
                    # Do not enable this
                    #sed -i '/net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.opus\/48000=1000/a net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.opus/24000=900' $PROP
                    sed -i 's@net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.speex/32000=0@net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.speex/32000=25@' $PROP
                    sed -i 's@net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.speex/16000=0@net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.speex/16000=20@' $PROP
                    #sed -i 's@net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.SILK/16000=0@net.java.sip.communicator.impl.protocol.sip.acc1.Encodings.SILK/16000=15@' $PROP
                    # avoid immediate call back
                    echo "net.java.sip.communicator.impl.protocol.sip.SKIP_REINVITE_ON_FOCUS_CHANGE_PROP=true" >> $PROP
                    # This is needed for sipgate, no more according to my testing
                    echo "org.jitsi.impl.neomedia.transform.csrc.CsrcTransformEngine.DISCARD_CONTRIBUTING_SOURCES=true" >> $PROP
                    # Wait 7mins for room opening
                    echo "org.jitsi.jigasi.JVB_INVITE_TIMEOUT=420000" >> $PROP
                    # And restart jigasi container
                    docker restart root_jigasi_1
                  fi
                  # Signal completion
                  wc_notify --data-binary '{"status": "SUCCESS"}'
            path: /root/run.sh
            permissions: 0700
          - content:
              str_replace:
                params:
                  jigasi_sip_uri: {get_param: jigasi_sip_uri}
                template: |
                  #!/bin/bash
                  export USER=root
                  export USERNAME=$USER
                  export HOME=/$USER
                  cd ~
                  #docker-compose -f ~/docker-compose.yml -f ~/etherpad.yml down
                  if test -n "jigasi_sip_uri"; then
                    docker-compose -f ~/docker-compose.yml -f ~/jigasi.yml down
                  else
                    docker-compose -f ~/docker-compose.yml down
                  fi
            path: /root/down.sh
            permissions: 0750
          - content: |
              #!/bin/bash
              if test "$1" = "status"; then
                docker ps
              elif test "$1" = "start"; then
                /root/run.sh
              elif test "$1" = "stop"; then
                /root/down.sh
              else
                echo "Unknown command \"$1\""
                exit 3
              fi
            path: /etc/init.d/boot.local
            permissions: 0755
          - content:
              str_replace:
                params:
                  docker_mtu: {get_param: docker_mtu}
                template: |
                  {
                    "mtu": docker_mtu
                  }
            path: /tmp/daemon.json
            permissions: 0644
          - encoding: gz+b64
            content: {get_file: watermark.svg.gz}
            path: /root/watermark.svg
            permissions: 0644
          - encoding: gz+b64
            content: {get_file: favicon.ico.gz}
            path: /root/favicon.ico
            permissions: 0644
          - content: |
              #!/bin/bash
              DEV=$(ip route show default | head -n1 | sed 's/^.*dev \([^ ]*\).*$/\1/')
              MTU=$(ip link show $DEV | head -n1 | sed 's/^.*mtu \([0-9]*\) .*$/\1/')
              if grep '"mtu": 0' /tmp/daemon.json >/dev/null; then
                  sed -i "s/: 0/: $MTU/" /tmp/daemon.json
              fi
            path: /root/set_mtu.sh
            permissions: 0755
        runcmd:
          - "/root/set_mtu.sh"
          - "mv /tmp/daemon.json /etc/docker/daemon.json"
          - "systemctl enable docker"
          - "/root/build-jitsi.sh"
          - "/root/config-env.sh"
          - "sed -i \"/After=/iAfter=docker.service\" /usr/lib/systemd/system/rc-local.service"
          - "/root/run.sh"
        final_message: "The system is finally up, after $UPTIME seconds"


  #################
  # Security groups
  #################

  security_group_jitsi:
    type: OS::Neutron::SecurityGroup
    properties:
      name: {get_param: "OS::stack_name"}
      rules:
          # admin access
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
          # Port 8000/80 (letsenc_http_port) needed for letsenc acme challenge
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: {get_param: letsenc_http_port}
          port_range_max: {get_param: letsenc_http_port}
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
          # Harvester
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 4443
          port_range_max: 4443
          # The Web frontend
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: {get_param: public_port}
          port_range_max: {get_param: public_port}
          # Jitsi Video Bridge
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: 10000
          port_range_max: 10010
          # SIP
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: {get_param: jigasi_port_min}
          port_range_max: {get_param: jigasi_port_max}

  ############
  # Networks #
  ############

  net_jitsi:
    type: OS::Neutron::Net
    properties:
      name: {get_param: "OS::stack_name"}
      # Comment these out if your cloud does not support them
      value_specs:
        availability_zone_hints:
          - {get_param: availability_zone}

  subnet_jitsi:
    type: OS::Neutron::Subnet
    properties:
      name: {get_param: "OS::stack_name"}
      network: {get_resource: net_jitsi}
      cidr: 192.168.10.0/24
      # OTC
      #dns_nameservers: [ 100.125.4.25, 9.9.9.9 ]
      #dns_nameservers: [ 86.107.242.101, 8.8.8.8 ]
      dns_nameservers: [ 9.9.9.9, 8.8.8.8 ]
      allocation_pools:
        -
          start: 192.168.10.100
          end: 192.168.10.120

  ##########################
  # Network infrastructure #
  ##########################

  router:
    type: OS::Neutron::Router
    properties:
      name: {get_param: "OS::stack_name"}
      external_gateway_info:
        network: {get_param: public}
        # OTC
        # enable_snat: true
      # Comment these out if your cloud does not support them
      value_specs:
        availability_zone_hints:
          - {get_param: availability_zone}

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: {get_resource: router}
      subnet: {get_resource: subnet_jitsi}

  ###########
  # Manager #
  ###########

  jitsi_port:
    type: OS::Neutron::Port
    properties:
      name: {get_param: "OS::stack_name"}
      network_id: {get_resource: net_jitsi}
      fixed_ips:
        - ip_address: 192.168.10.99
      security_groups:
        - {get_resource: security_group_jitsi}

  jitsi_floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: router_interface
    properties:
      floating_network_id: {get_param: public}
      port_id: {get_resource: jitsi_port}

  jitsi_server:
    type: OS::Nova::Server
    properties:
      name: {get_param: "OS::stack_name"}
      key_name: {get_resource: key}
      image: {get_param: image_jitsi}
      flavor: {get_param: flavor_jitsi}
      availability_zone: {get_param: availability_zone}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: jitsi_boot_config}
      metadata:
        group: jitsi
      config_drive: true
      networks:
        - port: {get_resource: jitsi_port}

########
outputs:

  jitsi_address:
    value: {get_attr: [jitsi_floating_ip, floating_ip_address]}

  jitsi_address_internal:
    value: {get_attr: [jitsi_port, fixed_ips, 0, ip_address]}

  public_key:
    value: {get_attr: [key, public_key]}

  private_key:
    value: {get_attr: [key, private_key]}
